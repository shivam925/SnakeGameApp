import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.geometry.*;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.util.Duration;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import java.util.LinkedList;
import java.util.Random;

public class SnakeApp extends Application {

    private static final int GRID_SIZE = 20;
    private static final int CELL_SIZE = 20;

    private int snakeX = 0;
    private int snakeY = 0;
    private int directionX = 1;
    private int directionY = 0;

    private Stage primaryStage;
    private LinkedList<Rectangle> snakeBody = new LinkedList<>();

    @Override
    public void start(Stage primaryStage) {
        this.primaryStage = primaryStage;

        BorderPane root = new BorderPane();
        root.setBackground(new Background(new BackgroundFill(Color.BLACK, CornerRadii.EMPTY, Insets.EMPTY)));

        Rectangle boundary = new Rectangle(GRID_SIZE * CELL_SIZE - 2, GRID_SIZE * CELL_SIZE - 2, Color.TRANSPARENT);
        boundary.setStroke(Color.WHITE);
        boundary.setStrokeWidth(2);

        Rectangle snakeHead = new Rectangle(CELL_SIZE * 0.4, CELL_SIZE * 0.4, Color.GREEN);

        StackPane snakeStackPane = new StackPane(boundary, snakeHead);
        snakeStackPane.setAlignment(Pos.TOP_LEFT);

        snakeStackPane.setTranslateX((GRID_SIZE / 2) * CELL_SIZE);
        snakeStackPane.setTranslateY((GRID_SIZE / 2) * CELL_SIZE);

        snakeBody.add(snakeHead);

        Button btnUp = createStyledButton("Up");
        Button btnDown = createStyledButton("Down");
        Button btnLeft = createStyledButton("Left");
        Button btnRight = createStyledButton("Right");

        btnUp.setOnAction(e -> changeDirection(0, -1));
        btnDown.setOnAction(e -> changeDirection(0, 1));
        btnLeft.setOnAction(e -> changeDirection(-1, 0));
        btnRight.setOnAction(e -> changeDirection(1, 0));

        Scene scene = new Scene(root, GRID_SIZE * CELL_SIZE, GRID_SIZE * CELL_SIZE, Color.BLACK);
        scene.setOnKeyPressed(event -> {
            KeyCode code = event.getCode();
            switch (code) {
                case UP:
                    changeDirection(0, -1);
                    break;
                case DOWN:
                    changeDirection(0, 1);
                    break;
                case LEFT:
                    changeDirection(-1, 0);
                    break;
                case RIGHT:
                    changeDirection(1, 0);
                    break;
            }
        });

        GridPane buttonGrid = new GridPane();
        buttonGrid.setHgap(10);
        buttonGrid.setVgap(10);
        buttonGrid.setAlignment(Pos.CENTER_LEFT);

        buttonGrid.add(btnUp, 1, 0);
        buttonGrid.add(btnDown, 1, 2);
        buttonGrid.add(btnLeft, 0, 1);
        buttonGrid.add(btnRight, 2, 1);

        root.setCenter(snakeStackPane);
        root.setLeft(buttonGrid);

        primaryStage.setTitle("Snake Game");
        primaryStage.setScene(scene);
        primaryStage.show();

        Timeline timeline = new Timeline(new KeyFrame(Duration.millis(200), e -> moveSnake()));
        timeline.setCycleCount(Animation.INDEFINITE);
        timeline.play();

        addRandomRedPixel(snakeStackPane);
    }

    private void handleCollision(StackPane snakeStackPane) {
        Rectangle newBodyPart = new Rectangle(CELL_SIZE, CELL_SIZE, Color.GREEN);
        snakeBody.add(newBodyPart);
        snakeStackPane.getChildren().add(newBodyPart);
    }

    private void moveSnake() {
        int newSnakeX = (snakeX + directionX + GRID_SIZE) % GRID_SIZE;
        int newSnakeY = (snakeY + directionY + GRID_SIZE) % GRID_SIZE;

        if (newSnakeX < 0 || newSnakeX >= GRID_SIZE || newSnakeY < 0 || newSnakeY >= GRID_SIZE) {
            snakeX = (snakeX + directionX + GRID_SIZE) % GRID_SIZE;
            snakeY = (snakeY + directionY + GRID_SIZE) % GRID_SIZE;
        } else {
            for (Rectangle bodyPart : snakeBody) {
                if (newSnakeX == (int) (bodyPart.getTranslateX() / CELL_SIZE) &&
                    newSnakeY == (int) (bodyPart.getTranslateY() / CELL_SIZE)) {
                    handleGameOver();
                    return;
                }
            }

            snakeX = newSnakeX;
            snakeY = newSnakeY;
        }

        StackPane snakeStackPane = (StackPane) ((BorderPane) primaryStage.getScene().getRoot()).getCenter();
        Rectangle snakeHead = snakeBody.getFirst();
        Rectangle redPixel = (Rectangle) snakeStackPane.getChildren().get(snakeStackPane.getChildren().size() - 1);

        if (snakeX == (int) (redPixel.getTranslateX() / CELL_SIZE) && snakeY == (int) (redPixel.getTranslateY() / CELL_SIZE)) {
            Rectangle newBodyPart = new Rectangle(CELL_SIZE, CELL_SIZE, Color.GREEN);
            snakeBody.add(0, newBodyPart);
            snakeStackPane.getChildren().add(0, newBodyPart);
            snakeStackPane.getChildren().remove(redPixel);
            addRandomRedPixel(snakeStackPane);
        }

        for (int i = snakeBody.size() - 1; i > 0; i--) {
            Rectangle bodyPart = snakeBody.get(i);
            Rectangle previousBodyPart = snakeBody.get(i - 1);

            bodyPart.setTranslateX(previousBodyPart.getTranslateX());
            bodyPart.setTranslateY(previousBodyPart.getTranslateY());
        }

        snakeHead.setTranslateX((snakeX + GRID_SIZE) % GRID_SIZE * CELL_SIZE);
        snakeHead.setTranslateY((snakeY + GRID_SIZE) % GRID_SIZE * CELL_SIZE);
        snakeHead.setWidth(CELL_SIZE);
        snakeHead.setHeight(CELL_SIZE);
    }

    private void handleGameOver() {
        int score = snakeBody.size();
        Text gameOverText = new Text("Game Over!\nYour Score: " + score);
        gameOverText.setFill(Color.WHITE);
        gameOverText.setFont(Font.font("Arial", 20));

        StackPane snakeStackPane = (StackPane) ((BorderPane) primaryStage.getScene().getRoot()).getCenter();
        gameOverText.setTranslateX((GRID_SIZE * CELL_SIZE - gameOverText.getBoundsInLocal().getWidth()) / 2);
        gameOverText.setTranslateY(GRID_SIZE * CELL_SIZE / 2);

        snakeStackPane.getChildren().add(gameOverText);
    }

    private void changeDirection(int dx, int dy) {
        if ((directionX == 0 && dx != 0) || (directionY == 0 && dy != 0)) {
            directionX = dx;
            directionY = dy;
        }
    }

    private Button createStyledButton(String text) {
        Button button = new Button(text);
        button.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-font-size: 14;");
        return button;
    }

    private void addRandomRedPixel(StackPane snakeStackPane) {
        Rectangle redPixel = new Rectangle(CELL_SIZE, CELL_SIZE, Color.RED);
        Random random = new Random();

        int randomX, randomY;
        do {
            randomX = random.nextInt(GRID_SIZE);
            randomY = random.nextInt(GRID_SIZE);
        } while (isOnSnake(snakeStackPane, randomX, randomY));

        redPixel.setTranslateX(randomX * CELL_SIZE);
        redPixel.setTranslateY(randomY * CELL_SIZE);

        snakeStackPane.getChildren().add(redPixel);
    }

    private boolean isOnSnake(StackPane snakeStackPane, int x, int y) {
        for (Rectangle bodyPart : snakeBody) {
            if (x == (int) (bodyPart.getTranslateX() / CELL_SIZE) && y == (int) (bodyPart.getTranslateY() / CELL_SIZE)) {
                return true;
            }
        }
        return false;
    }

    public static void main(String[] args) {
        launch(args);
    }
}
